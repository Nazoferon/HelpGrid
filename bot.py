import kb, text_info, logging, json, asyncio, requests, re, bd_connect
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import PreCheckoutQuery, ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN_API, user_id, PAYMENTS_TOKEN, LIQPAY_PRIVATE_KEY, LIQPAY_PUBLIC_KEY
from news import check_news_update_json, search_news
from bs4 import BeautifulSoup
from time import sleep
from aioliqpay import LiqPay
from datetime import datetime, timedelta


# –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ –±–æ—Ç–∞
bot = Bot(token=TOKEN_API, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def on_startup(_):
    print('–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π')

# –ö–ª–∞—Å –∑—ñ —Å—Ç–∞–Ω–∞–º–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
class TextState_connect_internet(StatesGroup):
    waiting_for_text = State()
# –ö–ª–∞—Å –∑—ñ —Å—Ç–∞–Ω–∞–º–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è
class TextState_connect_tv(StatesGroup):
    waiting_for_text = State()
# –ö–ª–∞—Å –∑—ñ —Å—Ç–∞–Ω–∞–º–∏ –∑–≤'—è–∑–∫—É –∑ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º
class TextState_spec(StatesGroup):
    waiting_for_text = State()

# ID 
ADMIN_CHAT_ID = 6172627661
ADMIN_CONF_ID = -1001744484840

# –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –π–æ–≥–æ ID –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
def is_user_in_blacklist(user_id):
    conn = bd_connect.sqlite3.connect('usersID.db')
    c = conn.cursor()
    c.execute("SELECT * FROM blacklist WHERE id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

# –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –π–æ–≥–æ ID –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
def is_user_in_bd(user_id):
    conn = bd_connect.sqlite3.connect('usersID.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

# –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —á–∏—Å–µ–ª –∑–∞–º—ñ—Å—Ç—å –±—É–∫–≤
def is_number(input_text):
    return input_text.isdigit()

#===========================START===================================

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
    else:
        await message.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ üëã\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –∞–±–æ –ø–ª–∏—Ç–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è.', 
        reply_markup=kb.kb_main_menu)
        # await bot.send_sticker(message.from_user.id,
        #                        sticker='CAACAgIAAxkBAAEHm6dj4Q2eNiL4v-vpqPwp86LJYYdSxgACbRQAAvh48Ev_35tLbqKxRy4E',
        #                        reply_markup=kb.kb_main_menu)
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        bd_connect.cursor.execute('SELECT * FROM users WHERE id=?', (message.from_user.id,))
        result = bd_connect.cursor.fetchone()
        if result:
            registered = await message.reply('–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –±–æ—Ç–∞.')
            await asyncio.sleep(3)
            await registered.delete()
        else:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –π–æ–≥–æ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ
            bd_connect.cursor.execute('INSERT INTO users (id, username, fullname) VALUES (?, ?, ?)', (message.from_user.id, message.from_user.username, message.from_user.full_name))
            bd_connect.conn.commit()
            not_registered = await message.reply('–í–∞—à ID –±—É–¥–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –±–æ—Ç–∞.')
            await asyncio.sleep(3)
            await not_registered.delete()

#===========================HELP=================================
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
    else:
        await message.answer(text=text_info.HELP_COMMAND, parse_mode='HTML')
        await message.delete()
@dp.message_handler(text='–î–æ–ø–æ–º–æ–≥–∞')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
    else:
        await message.answer(text=text_info.HELP_COMMAND, parse_mode='HTML')

#=========================TARIFFS================================
@dp.message_handler(commands=['tariffs'])
async def tariffs_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.TARIFFS_TTI, parse_mode='HTML', reply_markup=kb.ikeyboard_tariffs)
@dp.message_handler(text='–¢–∞—Ä–∏—Ñ–∏')
async def tariffs_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.TARIFFS_TTI, parse_mode='HTML', reply_markup=kb.ikeyboard_tariffs)    

#–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
async def button_callback_handler(message: types.CallbackQuery):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await bot.send_message(chat_id=message.from_user.id, text="–ù–∞–ø–∏—à—ñ—Ç—å –∞–¥—Ä–µ—Å—É, –∑–∞ —è–∫–æ—é –±—É–¥–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É(–ü—Ä–∏–∫–ª–∞–¥: –ù–æ–≤–æ–≤–æ–ª–∏–Ω—Å—å–∫, –≤—É–ª–∏—Ü—è\–≤—É–ª. –°–∞–≥–∞–π–¥–∞—á–Ω–æ–≥–æ 37, –ø—ñ–¥'—ó–∑–¥ 2, –∫–≤–∞—Ä—Ç–∏—Ä–∞\–∫–≤.43)", reply_markup=None)
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"
    await TextState_connect_internet.waiting_for_text.set()

# –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ InlineKeyboardButton
dp.register_callback_query_handler(button_callback_handler, text='connect_the_internet')

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç
@dp.message_handler(state=TextState_connect_internet.waiting_for_text)
async def send_to_admin_conference(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–≤–∂–∏–Ω—É —Ä–µ—á–µ–Ω–Ω—è
    text = message.text
    if len(text) < 10:
        await bot.send_message(chat_id=message.from_user.id, text='–í–∏ –≤–≤–µ–ª–∏ –º–∞–ª–æ —Å–ª—ñ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø–∏—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥. –ü–æ–Ω–æ–≤—ñ—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–∞–∂–∞—é –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É".', reply_markup=kb.kb_main_menu)
        await state.finish()
    else:
        admin_message = f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} (<code>{message.from_user.id}</code>) –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç–∞.\n\n–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: <b>{text}</b>"
        await bot.send_message(chat_id=ADMIN_CONF_ID, text=f"<b>–ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ü–û–°–õ–£–ì - –Ü–ù–¢–ï–†–ù–ï–¢</b>\n\n{admin_message}\n\n –©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id} - –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ <code>/answ {message.from_user.id}</code> —Ç–µ–∫—Å—Ç...")
        await bot.send_message(chat_id=message.from_user.id, text="–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—á—ñ–∫—É–π—Ç–µ –ø–æ–¥–∞–ª—å—à–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π! ‚ô•", reply_markup=kb.kb_main_menu)
        # –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
        await state.finish()

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
async def button_callback_handler(message: types.CallbackQuery):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await bot.send_message(chat_id=message.from_user.id, text="–ù–∞–ø–∏—à—ñ—Ç—å –∞–¥—Ä–µ—Å—É, –∑–∞ —è–∫–æ—é –±—É–¥–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è(–ü—Ä–∏–∫–ª–∞–¥: –ù–æ–≤–æ–≤–æ–ª–∏–Ω—Å—å–∫, –≤—É–ª–∏—Ü—è\–≤—É–ª. –°–∞–≥–∞–π–¥–∞—á–Ω–æ–≥–æ 37, –ø—ñ–¥'—ó–∑–¥ 2, –∫–≤–∞—Ä—Ç–∏—Ä–∞\–∫–≤.43)", reply_markup=None)
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"
    await TextState_connect_tv.waiting_for_text.set()

# –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ InlineKeyboardButton
dp.register_callback_query_handler(button_callback_handler, text='connect_the_tv')

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è
@dp.message_handler(state=TextState_connect_tv.waiting_for_text)
async def send_to_admin_conference(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–≤–∂–∏–Ω—É —Ä–µ—á–µ–Ω–Ω—è
    text = message.text
    if len(text) < 10:
        await bot.send_message(chat_id=message.from_user.id, text='–í–∏ –≤–≤–µ–ª–∏ –º–∞–ª–æ —Å–ª—ñ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø–∏—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥. –ü–æ–Ω–æ–≤—ñ—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–∞–∂–∞—é –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É".', reply_markup=kb.kb_main_menu)
        await state.finish()
    else:
        admin_message = f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} (<code>{message.from_user.id}</code>) –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç–∞.\n\n–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: <b>{text}</b>"
        await bot.send_message(chat_id=ADMIN_CONF_ID, text=f"<b>–ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ü–û–°–õ–£–ì - –¢–ï–õ–ï–ë–ê–ß–ï–ù–ù–Ø</b>\n\n{admin_message}\n\n –©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id} - –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ <code>/answ {message.from_user.id}</code> —Ç–µ–∫—Å—Ç...")
        await bot.send_message(chat_id=message.from_user.id, text="–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—á—ñ–∫—É–π—Ç–µ –ø–æ–¥–∞–ª—å—à–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π! ‚ô•", reply_markup=kb.kb_main_menu)
        # –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
        await state.finish()



#============================SERVICES==============================

@dp.message_handler(commands=['services'])
async def services_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.SERVICES, parse_mode='HTML', reply_markup=kb.ikeyboard_services)
@dp.message_handler(text='–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏')
async def services_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.SERVICES, parse_mode='HTML', reply_markup=kb.ikeyboard_services)

#=================================COMMUNICATION=============================

@dp.message_handler(commands=['communication'])
async def communication_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.COMMUNICATION, parse_mode='HTML', reply_markup=kb.ikeyboard_communication)
@dp.message_handler(text='–ó–≤\'—è–∑–æ–∫ –∑ –Ω–∞–º–∏')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.COMMUNICATION, parse_mode='HTML', reply_markup=kb.ikeyboard_communication)

#==================================SITE===============================

@dp.message_handler(commands=['site'])
async def site_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer('<a href="http://ttinv.org.ua">–°–∞–π—Ç –¢–∑–û–í "–ù–æ–≤–æ–≤–æ–ª–∏–Ω—Å—å–∫–µ –¢–¢–Ü (–Ω–∞—Ç–∏—Å–Ω—É—Ç–∏)"</a>',
                        parse_mode='HTML', reply_markup=kb.ikeyboard_site)
@dp.message_handler(text='–°–∞–π—Ç –¢–¢–Ü')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer('<a href="http://ttinv.org.ua">–°–∞–π—Ç –¢–∑–û–í "–ù–æ–≤–æ–≤–æ–ª–∏–Ω—Å—å–∫–µ –¢–¢–Ü"</a>',
                        parse_mode='HTML', reply_markup=kb.ikeyboard_site)

#===========================================MAIN MENU========================================================

@dp.message_handler(text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer('–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', reply_markup=kb.kb_main_menu)

#===========================================PAY MENU========================================================

@dp.message_handler(text='–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–∏?')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer('–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –º–µ–Ω—é –∑ –æ–ø–ª–∞—Ç–æ—é', reply_markup=kb.kb_pay_menu)
@dp.message_handler(text='–ü—Ä–∏–≤–∞—Ç24')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.PRIVAT24, reply_markup=kb.kb_pay_menu)
@dp.message_handler(text='–û—â–∞–¥24')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.OSHCHAD24, reply_markup=kb.kb_pay_menu)
@dp.message_handler(text='–ú–æ–Ω–æ–±–∞–Ω–∫')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.MONOBANK, reply_markup=kb.kb_pay_menu)
@dp.message_handler(text='–†–µ–∫–≤—ñ–∑–∏—Ç–∏')
async def help_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=text_info.REKVIZYTY, reply_markup=kb.kb_pay_menu)

#PRICE
LIQPAY_PUBLIC_KEY = "sandbox_i51470674466"  # –ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á LiqPay
LIQPAY_PRIVATE_KEY = "sandbox_NeqL8uNMwQ0X7EOmDzascREFGpea0ComaTbjCdKI"  # –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á LiqPay

liqpay = LiqPay(public_key=LIQPAY_PUBLIC_KEY, private_key=LIQPAY_PRIVATE_KEY)

@dp.message_handler(text='–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram')
async def process_buy_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return

    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, text='–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –æ–ø–ª–∞—Ç–∏:', reply_markup=kb.ikeyboard_prices)

def get_price_for_tariff(tariff):
    prices = {
        '_–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π': '110',
        '_–®–∞–ª–µ–Ω–∏–π': '130',
        '_PON': '170',
        '_–ü—ñ–ª—å–≥–æ–≤–∏–π': '70',
        '_–ë–∞–∑–æ–≤–∏–π': '99',
        '_PON+–¢–µ–ª–µ–±–∞—á–µ–Ω–Ω—è': '200',
        '_–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π+–¢–µ–ª–µ–±–∞—á–µ–Ω–Ω—è': '170',
        '_–®–∞–ª–µ–Ω–∏–π+–¢–µ–ª–µ–±–∞—á–µ–Ω–Ω—è': '190'
    }
    return prices.get(tariff, '0')

@dp.callback_query_handler(lambda c: c.data.startswith('_'))
async def process_tariff_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if is_user_in_blacklist(user_id):
        await bot.send_message(user_id, "–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return

    selected_tariff = callback_query.data
    selected_price = get_price_for_tariff(selected_tariff)
    await bot.send_message(callback_query.from_user.id, f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ <b>{selected_tariff}</b>. –¶—ñ–Ω–∞: <b>{selected_price}</b>–≥—Ä–Ω.")

    prices = [
        types.LabeledPrice(
            label='–¶—ñ–Ω–∞ —Ç–∞—Ä–∏—Ñ—É',
            amount=int(selected_price) * 100
        )
    ]


    invoice_message = await bot.send_invoice(
        callback_query.from_user.id,
        title=selected_tariff,
        description=' ',
        provider_token=PAYMENTS_TOKEN,
        currency='uah',
        photo_url='https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/LIQPAY_logos.svg/2560px-LIQPAY_logos.svg.png',
        photo_height=100,
        photo_width=250,
        photo_size=100,
        is_flexible=False,
        prices=prices,
        start_parameter='time-machine-example',
        payload='service-payment',
        need_name=True,
        need_phone_number=True,
        need_email=True
    )

@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True
    )

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    payment_info = message.successful_payment
    payment_id = payment_info.provider_payment_charge_id
    payer_name = payment_info.order_info.name
    phone_number = payment_info.order_info.phone_number
    email = payment_info.order_info.email

    payment_info_text = f"–ü–†–û–ô–®–õ–ê –û–ü–õ–ê–¢–ê\n\n" \
                        f"ID –æ–ø–ª–∞—Ç–∏: <b><code>{payment_id}</code></b>\n" \
                        f"–Ü–º'—è –ø–ª–∞—Ç–Ω–∏–∫–∞: {payer_name}\n" \
                        f"–ú–æ–±—ñ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–Ω–∏–∫–∞: <code>+{phone_number}</code>\n" \
                        f"–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞: <code>{email}</code>"

    await bot.send_message(ADMIN_CONF_ID, text=payment_info_text)
    await bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", reply_markup=kb.kb_main_menu)



#===========================================ID===============================================================

@dp.message_handler(commands=['id'])
async def id_commands(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text=f'–í–∞—à ID: <code>{message.from_user.id}</code>')

#===========================================NEWS=============================================================

@dp.message_handler(commands=['news'])
async def news_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    with open("news_dict.json") as file:
        news_dict = json.load(file)
    for k, v in sorted(news_dict.items()):
        news = f"<i><u>{v['news_date']}</u></i>\n" \
            f"{v['news_title']}\n\n" \
            f"{v['news_content']}"
        img = f"{v['news_img']}"
        news_link = f"{v['news_link']}"

        # –ü–ª–∞–≤–∞—é—á–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–Ω–∏
        ikeyboard_news = kb.InlineKeyboardMarkup()
        ik_news = kb.InlineKeyboardButton(text=(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏(—Ç–∏—Ü—å)"), url=news_link)
        ikeyboard_news.add(ik_news)

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
        await bot.send_photo(chat_id=message.chat.id, photo=img, reply_markup=kb.kb_news_menu)
        await message.answer(news, reply_markup=ikeyboard_news) 

    # await bot.send_photo(chat_id=message.chat.id, photo=search_news.news_img)
    # await message.answer(f"<i><u>{search_news.news_date}</u></i>\n{search_news.news_title}\n\n{search_news.news_content}",
    # parse_mode='HTML', reply_markup=search_news.ikeyboard_news)

@dp.message_handler(text='–ù–æ–≤–∏–Ω–∏')
async def news_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer(text='–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –º–µ–Ω—é –Ω–æ–≤–∏–Ω', reply_markup=kb.kb_news_menu)

@dp.message_handler(text='–£—Å—ñ –Ω–æ–≤–∏–Ω–∏')
async def news_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    with open("news_dict.json") as file:
        news_dict = json.load(file)
            
    for k, v in news_dict.items():
        news = f"<i><u>{v['news_date']}</u></i>\n" \
            f"{v['news_title']}\n\n" \
            f"{v['news_content']}"
        img = f"{v['news_img']}"
        news_link = f"{v['news_link']}"

        # –ü–ª–∞–≤–∞—é—á–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–Ω–∏
        ikeyboard_news = kb.InlineKeyboardMarkup()
        ik_news = kb.InlineKeyboardButton(text=(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏(—Ç–∏—Ü—å)"), url=news_link)
        ikeyboard_news.add(ik_news)

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
        await bot.send_photo(chat_id=message.chat.id, photo=img, reply_markup=kb.kb_news_menu)
        await message.answer(news, reply_markup=ikeyboard_news)
    # await bot.send_photo(chat_id=message.chat.id, photo=search_news.news_img)
    # await message.answer(f"<i><u>{search_news.news_date}</u></i>\n{search_news.news_title}\n\n{search_news.news_content}",
    # parse_mode='HTML', reply_markup=search_news.ikeyboard_news)

@dp.message_handler(text='–°–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏')
async def news_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    fresh_news = check_news_update_json()

    if len(fresh_news) >= 1:
        for k, v in fresh_news.items():
            news = f"<i><u>{v['news_date']}</u></i>\n" \
                f"{v['news_title']}\n\n" \
                f"{v['news_content']}"
            img = f"{v['news_img']}"
            news_link = f"{v['news_link']}"

        # –ü–ª–∞–≤–∞—é—á–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–Ω–∏
        ikeyboard_news = kb.InlineKeyboardMarkup()
        ik_news = kb.InlineKeyboardButton(text=(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏(—Ç–∏—Ü—å)"), url=news_link)
        ikeyboard_news.add(ik_news)

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
        await bot.send_photo(chat_id=message.chat.id, photo=img)
        await message.answer(news, reply_markup=ikeyboard_news)
    else:
        await message.answer(datetime.now().strftime("–î–æ %d.%m.%Y %T") + " –Ω–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω")


async def news_every_minute():
    while True:
        fresh_news = check_news_update_json()
        if len(fresh_news) >= 1:
            for k, v in fresh_news.items():
                news = f"<i><u>{v['news_date']}</u></i>\n" \
                    f"{v['news_title']}\n\n" \
                    f"{v['news_content']}\n"
                img = f"{v['news_img']}"
                news_link = f"{v['news_link']}"

                ikeyboard_news = kb.InlineKeyboardMarkup()
                ik_news = kb.InlineKeyboardButton(text=(f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏(—Ç–∏—Ü—å)"), url=news_link)
                ikeyboard_news.add(ik_news)
                await bot.send_photo(user_id, photo=img, disable_notification=True)
                await bot.send_message(user_id, news, disable_notification=True, reply_markup=ikeyboard_news)
        else:
            await bot.send_message(user_id, datetime.now().strftime("–î–æ %d.%m.%Y %T") + " –Ω–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω", disable_notification=True)
        await asyncio.sleep(1200)


#====================================================================================================================================================================

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
@dp.message_handler(text='–ó–≤\'—è–∑–æ–∫ –∑ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º')
async def send_text_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer("–í–∏ –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —ñ –≤–æ–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É üë®‚Äçüè≠", reply_markup=None)
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"
    await TextState_spec.waiting_for_text.set()
# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
@dp.message_handler(commands=['spec'])
async def send_text_command(message: types.Message):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    await message.answer("–í–∏ –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —ñ –≤–æ–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É üë®‚Äçüè≠", reply_markup=None)
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"
    await TextState_spec.waiting_for_text.set()

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler(state=TextState_spec.waiting_for_text)
async def send_to_admin_conference(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–≤–∂–∏–Ω—É —Ä–µ—á–µ–Ω–Ω—è
    text = message.text
    if len(text) < 10:
        await message.answer('–í–∏ –≤–≤–µ–ª–∏ –º–∞–ª–æ —Å–ª—ñ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø–∏—Å—É –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏. –ü–æ–Ω–æ–≤—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–≤\'—è–∑–æ–∫ –∑ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º" –∞–±–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /spec')
        await state.finish()
    else:
        admin_message = f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} (<code>{message.from_user.id}</code>) –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç–∞.\n\n–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: <b>{text}</b>"
        await bot.send_message(chat_id=ADMIN_CONF_ID, text=f"<b>–¢–ï–•.–ù–ï–ü–û–õ–ê–î–ö–ò</b>\n\n{admin_message}\n\n –©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id} - –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ <code>/answ {message.from_user.id}</code> —Ç–µ–∫—Å—Ç...")
        await message.reply("–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞! ‚ô•")
        # –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
        await state.finish()

#=================================================ADMINS=======================================================================================

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É
@dp.message_handler(commands=["answ"])
async def bot_send_to_client(message: types.Message, command: Text):
    user_id = message.from_user.id
    if is_user_in_blacklist(user_id):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    chat_id = message.chat.id
    user = await bot.get_chat_member(chat_id, user_id)
    if user.is_chat_admin():
        if command.args:
            id_clients = re.findall(r'\d+', command.args)
            if len(id_clients) > 0:
                id_client = id_clients[0]
                client_text = command.args.replace(id_client, '')
                if is_user_in_bd(id_client):
                    if client_text == '':
                        await bot.send_message(chat_id=ADMIN_CONF_ID, text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –Ω—ñ—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É")
                    else:
                        if len(client_text) < 10:
                            await bot.send_message(chat_id=ADMIN_CONF_ID, text="–í–∏ –≤–≤–µ–ª–∏ –∑–∞–º–∞–ª–æ —Å–ª—ñ–≤")
                        else:
                            await bot.send_message(chat_id=id_client, text=f"üë®‚Äçüè≠ [–°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç]: {client_text}")
                            await bot.send_message(chat_id=ADMIN_CONF_ID, text=f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <code>{id_client}</code> –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                else:
                    await bot.send_message(chat_id=ADMIN_CONF_ID, text="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –Ω–∞—à–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω–∏–π ID‚ùó")
            else:
                await bot.send_message(chat_id=ADMIN_CONF_ID, text="–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–ª—ñ—î–Ω—Ç–∞")
        else:
            await bot.send_message(chat_id=ADMIN_CONF_ID, text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ ID –∫–ª—ñ—î–Ω—Ç–∞")
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–º–∞–Ω–¥‚ùó")


# –î–æ–¥–∞–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
@dp.message_handler(commands=['addbl'])
async def add_to_blacklist(message: types.Message, command: Text):
    chat_id = message.chat.id
    user_id_a = message.from_user.id
    user_a = await bot.get_chat_member(chat_id, user_id_a)
    if is_user_in_blacklist(user_id_a):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    else:
        if user_a.is_chat_admin():
            if command.args:
                # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –ß–°
                client_bl_id = re.findall(r'\d+', command.args)
                if len(client_bl_id) > 0:
                    client_bl_id = client_bl_id[0]
                    if client_bl_id == '':
                        await bot.send_message(chat_id=ADMIN_CONF_ID, text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ ID –∫–ª—ñ—î–Ω—Ç–∞")
                    else:
                        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
                        bd_connect.cursor.execute('SELECT * FROM blacklist WHERE id=?', (client_bl_id,))
                        result = bd_connect.cursor.fetchone()
                        if result:
                            registered = await message.reply('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É.')
                            await asyncio.sleep(3)
                            await registered.delete()
                        else:
                            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –π–æ–≥–æ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ
                            bd_connect.cursor.execute('INSERT INTO blacklist (id) VALUES (?)', (client_bl_id,))
                            bd_connect.conn.commit()
                            await message.reply(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {client_bl_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π –¥–æ –ß–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É!")
                else:
                    await bot.send_message(chat_id=ADMIN_CONF_ID, text="–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–ª—ñ—î–Ω—Ç–∞")
            else:
                await bot.send_message(chat_id=ADMIN_CONF_ID, text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ ID –∫–ª—ñ—î–Ω—Ç–∞")
        else:
            await message.answer("–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–º–∞–Ω–¥‚ùó")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤–º—ñ—Å—Ç—É –ë–î –æ–±–æ—Ö —Ç–∞–±–ª–∏—Ü—å
@dp.message_handler(commands=['view'])
async def view_tables(message: types.Message):
    chat_id = message.chat.id
    user_id_a = message.from_user.id
    user_a = await bot.get_chat_member(chat_id, user_id_a)
    if is_user_in_blacklist(user_id_a):
        await message.reply("–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")
        return
    else:
        if user_a.is_chat_admin():
            conn = bd_connect.conn
            cursor = bd_connect.cursor

            cursor.execute("SELECT * FROM users")
            users_data = cursor.fetchall()
            cursor.execute("SELECT COUNT(*) FROM users")
            user_count_users = cursor.fetchone()[0]

            response = f"<b>–¢–∞–±–ª–∏—Ü—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤[{user_count_users}]:</b>\n"
            for row in users_data:
                response += str(row) + "\n"

            cursor.execute("SELECT * FROM blacklist")
            blacklist_data = cursor.fetchall()
            cursor.execute("SELECT COUNT(*) FROM blacklist")
            user_count_blacklist = cursor.fetchone()[0]
            response += f"\n<b>–¢–∞–±–ª–∏—Ü—è –ß–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É[{user_count_blacklist}]:</b>\n"
            for row in blacklist_data:
                response += str(row) + "\n"

            await bot.send_message(chat_id=chat_id, text=response, parse_mode='HTML')
        else:
            await message.answer("–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–º–∞–Ω–¥‚ùó")

#====================================================================================================================================================================
#================================================================GET_ID_GROUP========================================================================================
# @dp.message_handler(commands=['idgr'])
# async def commands_id(message: types.Message):
#         await message.answer(text=f"id –≤–∞—à–æ—ó –≥—Ä—É–ø–∏: {message.chat.id}")
#====================================================================================================================================================================

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    #loop.create_task(news_every_minute())
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)